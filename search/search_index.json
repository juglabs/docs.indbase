{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Header 1 INDBASE.COM Header 2 World Class Platform as a Service Header 3 Its a monumental work in progress! Tasks to be completed - [x] Upload Service - [x] Build Service - [ ] Deploy Service","title":"Home"},{"location":"#header-1","text":"INDBASE.COM","title":"Header 1"},{"location":"#header-2","text":"World Class Platform as a Service","title":"Header 2"},{"location":"#header-3","text":"Its a monumental work in progress! Tasks to be completed - [x] Upload Service - [x] Build Service - [ ] Deploy Service","title":"Header 3"},{"location":"about/","text":"Header 1 Indbase.com - World Class Platform as a Service Header 2 This is Documentation site for Indbase.com Indbase.com is in stealth mode right now!","title":"About"},{"location":"about/#header-1","text":"Indbase.com - World Class Platform as a Service","title":"Header 1"},{"location":"about/#header-2","text":"This is Documentation site for Indbase.com Indbase.com is in stealth mode right now!","title":"Header 2"},{"location":"paas/basics/paas-basics/","text":"When you're tiny, margins should not be what you focus on. When you'are tiny, you should be focused on creating customer value. Bill Gates said something along the lines of \u201cA platform is when the customer\u2019s value exceeds the creator\u2019s value.\u201d The person who created the platform gets something back out of it, they get financial gain or whatever, but the people who build on top of it get so much more value out of what they\u2019ve built. And that\u2019s a platform. Multi-tenant Kubernetes clusters at scale, at their scale, for a lot of customers\u2026 Because that is something that has been really, really hard for even a single company.","title":"Basics"},{"location":"paas/issues/paas-issues/","text":"Header2 Problems with Cloud Service Providers - AWS, GCP etc Stripe in its initial days was engaging 20% of their engineering team on managing AWS infrastructure. Its about the same in other companies also Stripe back in 2016 was still not using Kubernetes AWS is like, look we give you these legos, you build whatever you want! But the QUESTION is, once these applications on PaaS scale, it begins HARD TO DEBUG. So how do you deal with that? Your platform should expose right kind of primitives, but it doesn't have to expose all fo them at the same time, and all of them in the same way. Platform should have PRIVATE NETWORKING built in, SERVICE DISCOVERY built in Every application on the platform gets both a public address and private address - databases, managed data stores etc Network Isolation as a feature, isolate development/staging/production environments from each other from a network standpoint of view with a single click Ultimately it really comes down to being INCREDIBLY CLOSE to your customers who are scaling on the platform - AWS-NETFLIX analogy User Experience - Lot of IN-PRODUCT GUIDANCE - Information architecture work - Lot of design, UI/UX - Lot of sensible defaults - Customer feedback - Good logs, Good Documents, Good Error Messageas are key KUBERNETES - Kubernetes does a good job with container orchestration - Problem with K8 - surface area of K8 is massive - even to do a simple thing you have to understand 10 different concepts - Give people the flexibility of Kubernetes without having to understand things Things to take care - As your product becomes popular, DDoS attacks become common - and not just at the HTTP layer, but at L4 as well, at the TCP layer - So if you are dealing with bare metal, then you have to work about L3,L4, application level attacks - So RENDER didn't do bare metal, they use AWS, GCP, CloudFlare because they've dealt with these problems before","title":"Issues"},{"location":"paas/issues/paas-issues/#header2","text":"Problems with Cloud Service Providers - AWS, GCP etc Stripe in its initial days was engaging 20% of their engineering team on managing AWS infrastructure. Its about the same in other companies also Stripe back in 2016 was still not using Kubernetes AWS is like, look we give you these legos, you build whatever you want! But the QUESTION is, once these applications on PaaS scale, it begins HARD TO DEBUG. So how do you deal with that? Your platform should expose right kind of primitives, but it doesn't have to expose all fo them at the same time, and all of them in the same way. Platform should have PRIVATE NETWORKING built in, SERVICE DISCOVERY built in Every application on the platform gets both a public address and private address - databases, managed data stores etc Network Isolation as a feature, isolate development/staging/production environments from each other from a network standpoint of view with a single click Ultimately it really comes down to being INCREDIBLY CLOSE to your customers who are scaling on the platform - AWS-NETFLIX analogy User Experience - Lot of IN-PRODUCT GUIDANCE - Information architecture work - Lot of design, UI/UX - Lot of sensible defaults - Customer feedback - Good logs, Good Documents, Good Error Messageas are key KUBERNETES - Kubernetes does a good job with container orchestration - Problem with K8 - surface area of K8 is massive - even to do a simple thing you have to understand 10 different concepts - Give people the flexibility of Kubernetes without having to understand things Things to take care - As your product becomes popular, DDoS attacks become common - and not just at the HTTP layer, but at L4 as well, at the TCP layer - So if you are dealing with bare metal, then you have to work about L3,L4, application level attacks - So RENDER didn't do bare metal, they use AWS, GCP, CloudFlare because they've dealt with these problems before","title":"Header2"}]}